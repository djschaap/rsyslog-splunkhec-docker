global(processInternalMessages="on")
global (
  parser.escapeControlCharactersOnReceive="on"

  # https://github.com/rsyslog/rsyslog/issues/552
  parser.escapeControlCharacterTab="off"
)

#module(load="imtcp" StreamDriver.AuthMode="anon" StreamDriver.Mode="1")
module(load="impstats") # config.enabled=`echo $ENABLE_STATISTICS`)
module(load="imrelp")
#module(load="imptcp")
module(load="imudp" TimeRequery="500")

module(load="omstdout")
#module(load="omelasticsearch")

module(load="mmjsonparse")
module(load="mmutf8fix")

module(load="omprog") # needed for omsplunkhec

#input(type="imptcp" port="5141")
input(type="imudp" port="5140" ruleset="noc_syslog")
input(type="imudp" port="5141" ruleset="noc_syslog")
input(type="imudp" port="5142" ruleset="noc_trap")
input(type="imudp" port="5143" ruleset="noc_syslog")
input(type="imrelp" port="1601")

# I'd use option.jsonf if it could handle the nested "event" structure
template(name="json_to_splunk_hec" type="list") {
  constant(value="{")
  property(outname="time" name="timegenerated" dateFormat="unixtimestamp" format="jsonf")
  constant(value=",")
  property(outname="host" name="$.outer_host" format="jsonf") # source IP, from fromhost-ip
  constant(value=",")
  property(outname="index" name="$.index" format="jsonf")
  constant(value=",")
  property(outname="source" name="$.source" format="jsonf")
  constant(value=",")
  property(outname="sourcetype" name="$.sourcetype" format="jsonf")
  constant(value=",\"event\":{")
  property(outname="customer_id" name="$.customer_id" format="jsonf")
  constant(value=",")
  property(outname="inner_host" name="hostname" format="jsonf") # source from within message
  constant(value=",")
  property(outname="severity" name="syslogseverity" format="jsonf")
  #constant(value=",")
  #property(outname="severity-text" name="syslogseverity-text" caseConversion="upper" format="jsonf")
  constant(value=",")
  property(outname="facility" name="syslogfacility-text" format="jsonf")
  constant(value=",")
  property(outname="syslog-tag" name="syslogtag" format="jsonf")
  constant(value=",")
  property(outname="app-name" name="app-name" format="jsonf")
  constant(value=",")
  property(outname="message" name="msg" format="jsonf")
  constant(value=",") # DEBUG
  property(outname="raw_message" name="rawmsg-after-pri" format="jsonf") # DEBUG
  constant(value="}}\n")
}

# includes done explicitely
#include(file="/etc/rsyslog.conf.d/log_to_logsene.conf" config.enabled=`echo $ENABLE_LOGSENE`)
include(file="/etc/rsyslog.conf.d/log_to_files.conf" config.enabled=`echo $ENABLE_LOGFILES`)

#################### default ruleset begins ####################

# we emit our own messages to docker console:
syslog.* :omstdout:

include(file="/config/droprules.conf" mode="optional")  # this permits the userto easily drop unwanted messages

action(name="main_utf8fix" type="mmutf8fix" replacementChar="?")

#action(type="omfile" file="/logs/ruleset-default" template="RSYSLOG_FileFormat" config.enabled=`echo $ENABLE_LOGFILES`)
action(type="omfile" file="/logs/ruleset-default" template="RSYSLOG_FileFormat") # config.enabled="off")

ruleset(name="noc_syslog") {
  set $.customer_id = "00000";
  set $.index = "c00000-main";
  set $.outer_host = $fromhost-ip;
  set $.source = "hec:syslog:" & $$myhostname;

  if $programname == "tvcs" then {
    set $.sourcetype = "sen-noc:tms-garbage";

    #action(type="omfile" file="/logs/noise" template="RSYSLOG_FileFormat" config.enabled=`echo $ENABLE_LOGFILES`)
  }
  else {
    set $.sourcetype = "sen-noc:syslog";

    action(
      type="omfile"
      file="/logs/ruleset-noc_syslog"
      template="RSYSLOG_FileFormat"
      #config.enabled=`echo $ENABLE_LOGFILES`
    )
  }

  action(
    type="omprog"
    binary="/config/omsplunkhec.py HEC_TOKEN splunk-hf"
    # if 8088 is using SSL: add --ssl --ssl_noverify
    # --port=8088 # default
    template="json_to_splunk_hec"
  )
}

ruleset(name="noc_trap") {
  set $.customer_id = "00000";
  set $.index = "c00000-main";
  set $.outer_host = $fromhost-ip;
  set $.source = "hec:syslog:" & $$myhostname;
  set $.sourcetype = "sen-noc:trap";

  action(
    type="omfile"
    file="/logs/ruleset-noc_trap"
    template="RSYSLOG_FileFormat"
    #config.enabled=`echo $ENABLE_LOGFILES`
  )

  action(
    type="omprog"
    binary="/config/omsplunkhec.py HEC_TOKEN splunk-hf --log_dir=/config"
    # if 8088 is using SSL: add --ssl --ssl_noverify
    # --port=8088 # default
    template="json_to_splunk_hec"
  )
}

include(text=`echo $CNF_CALL_LOG_TO_LOGFILES`)
include(text=`echo $CNF_CALL_LOG_TO_LOGSENE`)
